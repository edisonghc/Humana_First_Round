knitr::opts_chunk$set(warning=FALSE, message=FALSE, cache = TRUE)
## Load libraries
library(tidyverse)
library(tibble)
library(janitor)
library(lubridate)
library(GGally)
library(ggridges)
#library(alr4)
#library(broom)
# library(ggpubr)
## Read in data
library(readxl)
demo_df <- read_excel("Humana Case 2020 Q1 -- Data.xlsx",
sheet = "Demographics", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"numeric", "numeric", "text", "text"))
claims_df <- read_excel("Humana Case 2020 Q1 -- Data.xlsx",
sheet = "Claims")
er_df <- read_excel("Humana Case 2020 Q1 -- Data.xlsx",
sheet = "ER Utilization")
pcp_df <- read_excel("Humana Case 2020 Q1 -- Data.xlsx",
sheet = "PCP Visits")
hospital_df <- read_excel("Humana Case 2020 Q1 -- Data.xlsx",
sheet = "Hospital Admissions")
rx_df <- read_excel("Humana Case 2020 Q1 -- Data.xlsx",
sheet = "Rx Utilization")
## Format data
claims = claims_df %>%
pivot_longer(-id, names_to = "time", values_to = "agg_claim") %>%
transmute(id = as.character(id),
time = excel_numeric_to_date(as.numeric(time),
date_system = "modern" ),
agg_claim)
er = er_df %>%
pivot_longer(-id, names_to = "time", values_to = "count") %>%
transmute(id = as.character(id),
time = excel_numeric_to_date(as.numeric(time),
date_system = "modern" ),
er_count = count)
pcp = pcp_df %>%
pivot_longer(-id, names_to = "time", values_to = "count") %>%
transmute(id = as.character(id),
time = excel_numeric_to_date(as.numeric(time),
date_system = "modern" ),
pcp_count = count)
hospital = hospital_df %>%
pivot_longer(-id, names_to = "time", values_to = "count") %>%
transmute(id = as.character(id),
time = excel_numeric_to_date(as.numeric(time),
date_system = "modern" ),
hospital_count = count)
rx = rx_df %>%
pivot_longer(-id, names_to = "time", values_to = "count") %>%
transmute(id = as.character(id),
time = excel_numeric_to_date(as.numeric(time),
date_system = "modern" ),
rx_count = count)
## Check counts
er %>% group_by(er_count) %>%
count() %>% arrange()
pcp %>% group_by(pcp_count) %>%
count() %>% arrange()
hospital %>% group_by(hospital_count) %>%
count() %>% arrange()
rx %>% group_by(rx_count) %>%
count() %>% arrange()
claims %>% group_by(agg_claim) %>%
count() %>% arrange() # assume mistyped a minus sign in front
## Check: each individual either get one or none CRD
demo_df %>% mutate(test_sum = transport+fin_assis+lonely+food_insec) %>%
filter(test_sum > 1)
## Check: region
demo_df %>% group_by(region) %>%
count() %>% arrange(n) # unknown small, ignore
## Check: rural
demo_df %>% group_by(rural) %>%
count() %>% arrange(n) # unknown small, ignore
## Check: is_lowincome
demo_df %>% group_by(is_lowincome) %>%
count() %>% arrange(n) # inconsistant label, need to fix
## Check: age
demo_df %>% group_by(age) %>% count() %>% filter(age<5) %>% arrange(age) # need to correct negative values, assume mistyped minues sign
demo_df %>% group_by(age) %>% count() %>% filter(age>95) %>% arrange(age) # need to correct >100 values, assume mistyped a 1 in the front
## Check: chronic_count
demo_df %>% group_by(chronic_count) %>% count() %>% arrange(chronic_count) # assume mistyped a 1 in the front
## Check: gender
demo_df %>% group_by(gender) %>% count() %>% arrange(n) # will just ignore other than M, F
demo = demo_df %>%
mutate(is_lowincome = demo_df$is_lowincome %in% c("Y","Yes","YES"),
age = ifelse(age>110, age-100, abs(age)),
mth_out = decimal_date(mdy(paste(mth_out,"1","2017"))),
chronic_count = ifelse(chronic_count>=10,
chronic_count-10,
chronic_count)) %>%
filter(region != "Unknown" & rural != "Unknown" & gender %in% c("M","F"))
## Add a column indicate which CRD an individual received
crd = NA
for(i in 1:length(demo$id)){
crd[i]=0
if(demo$transport[i] == 1){
crd[i] = 1
}
if(demo$fin_assis[i] == 1){
crd[i] = 2
}
if(demo$lonely[i] == 1){
crd[i] = 3
}
if(demo$food_insec[i] == 1){
crd[i] = 4
}
}
demo = demo %>% cbind(crd)
## Check: all NAs represent people from the control group
demo_df %>% filter(is.na(mth_out),
crd ==0)
## Join utilization and claim tables
loss = er %>%
inner_join(hospital, by = c("id"="id","time"="time")) %>%
inner_join(pcp, by = c("id"="id","time"="time")) %>%
inner_join(rx, by = c("id"="id","time"="time")) %>%
mutate(total_count = er_count+hospital_count+pcp_count+rx_count) %>%
inner_join(claims, by = c("id"="id","time"="time")) %>%
mutate(agg_claim = abs(agg_claim),
avg_claim = ifelse(agg_claim*total_count!=0,agg_claim/total_count,0))
## Convert date to decimal year
loss = loss %>% mutate(time = decimal_date(time))
## Reduction
demo = demo %>%
select(id,region,rural,is_lowincome,age,chronic_count,gender,mth_out,crd)
remove(claims,claims_df,demo_df,er,er_df,hospital,hospital_df,pcp,pcp_df,rx,rx_df,crd,i)
## Join demo(features) with loss(responses)
impact = demo %>% inner_join(loss)
## Add a column to indicate if row is after_crd
impact = impact %>%
mutate(after_crd = ifelse(!is.na(mth_out),time >= mth_out,NA))
#impact = impact %>% select(-mth_out)
out = sort(unique(impact$mth_out))
before=list()
after=list()
for(i in 1:length(out)){
tmp = impact %>% filter(mth_out==out[i])
before[[i]] = tmp %>% filter(after_crd==F)
write.csv(before[[i]],paste('before_received_crd_in_month_',i,'.csv'))
after[[i]] = tmp %>% filter(after_crd==T)
write.csv(after[[i]],paste('after_received_crd_in_month_',i,'.csv'))
}
control = impact %>% filter(is.na(mth_out))
write.csv(control,paste('control.csv'))
